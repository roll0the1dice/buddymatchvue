/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiResponseBoolean
 */
export interface ApiResponseBoolean {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseBoolean
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseBoolean
     */
    'statusCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiResponseBoolean
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiResponseBuddyUser
 */
export interface ApiResponseBuddyUser {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseBuddyUser
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseBuddyUser
     */
    'statusCode'?: string;
    /**
     * 
     * @type {BuddyUser}
     * @memberof ApiResponseBuddyUser
     */
    'data'?: BuddyUser;
}
/**
 * 
 * @export
 * @interface ApiResponseCustomPageImplBuddyUser
 */
export interface ApiResponseCustomPageImplBuddyUser {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseCustomPageImplBuddyUser
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseCustomPageImplBuddyUser
     */
    'statusCode'?: string;
    /**
     * 
     * @type {CustomPageImplBuddyUser}
     * @memberof ApiResponseCustomPageImplBuddyUser
     */
    'data'?: CustomPageImplBuddyUser;
}
/**
 * 
 * @export
 * @interface ApiResponseCustomPageImplTeam
 */
export interface ApiResponseCustomPageImplTeam {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseCustomPageImplTeam
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseCustomPageImplTeam
     */
    'statusCode'?: string;
    /**
     * 
     * @type {CustomPageImplTeam}
     * @memberof ApiResponseCustomPageImplTeam
     */
    'data'?: CustomPageImplTeam;
}
/**
 * 
 * @export
 * @interface ApiResponseCustomPageImplTeamUser
 */
export interface ApiResponseCustomPageImplTeamUser {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseCustomPageImplTeamUser
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseCustomPageImplTeamUser
     */
    'statusCode'?: string;
    /**
     * 
     * @type {CustomPageImplTeamUser}
     * @memberof ApiResponseCustomPageImplTeamUser
     */
    'data'?: CustomPageImplTeamUser;
}
/**
 * 
 * @export
 * @interface ApiResponseListBuddyUser
 */
export interface ApiResponseListBuddyUser {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListBuddyUser
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListBuddyUser
     */
    'statusCode'?: string;
    /**
     * 
     * @type {Array<BuddyUser>}
     * @memberof ApiResponseListBuddyUser
     */
    'data'?: Array<BuddyUser>;
}
/**
 * 
 * @export
 * @interface ApiResponseLong
 */
export interface ApiResponseLong {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseLong
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseLong
     */
    'statusCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiResponseLong
     */
    'data'?: number;
}
/**
 * 
 * @export
 * @interface ApiResponseObject
 */
export interface ApiResponseObject {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseObject
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseObject
     */
    'statusCode'?: string;
    /**
     * 
     * @type {object}
     * @memberof ApiResponseObject
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface ApiResponseString
 */
export interface ApiResponseString {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseString
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseString
     */
    'statusCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseString
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface ApiResponseTeam
 */
export interface ApiResponseTeam {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseTeam
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseTeam
     */
    'statusCode'?: string;
    /**
     * 
     * @type {Team}
     * @memberof ApiResponseTeam
     */
    'data'?: Team;
}
/**
 * 
 * @export
 * @interface ApiResponseTeamUser
 */
export interface ApiResponseTeamUser {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseTeamUser
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseTeamUser
     */
    'statusCode'?: string;
    /**
     * 
     * @type {TeamUser}
     * @memberof ApiResponseTeamUser
     */
    'data'?: TeamUser;
}
/**
 * 
 * @export
 * @interface BuddyUser
 */
export interface BuddyUser {
    /**
     * 
     * @type {number}
     * @memberof BuddyUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'isDelete'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'isParent'?: string;
    /**
     * 
     * @type {number}
     * @memberof BuddyUser
     */
    'parentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'personalBio'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'tagName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'updateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof BuddyUser
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'userRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUser
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface BuddyUserLoginRequest
 */
export interface BuddyUserLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof BuddyUserLoginRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUserLoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface BuddyUserRegisterRequest
 */
export interface BuddyUserRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof BuddyUserRegisterRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUserRegisterRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUserRegisterRequest
     */
    'checkPassword'?: string;
}
/**
 * 
 * @export
 * @interface BuddyUserUpdateRequest
 */
export interface BuddyUserUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof BuddyUserUpdateRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BuddyUserUpdateRequest
     */
    'fieldKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuddyUserUpdateRequest
     */
    'fieldValue'?: string;
}
/**
 * 
 * @export
 * @interface CustomPageImplBuddyUser
 */
export interface CustomPageImplBuddyUser {
    /**
     * 
     * @type {Array<BuddyUser>}
     * @memberof CustomPageImplBuddyUser
     */
    'content'?: Array<BuddyUser>;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBuddyUser
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBuddyUser
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBuddyUser
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof CustomPageImplBuddyUser
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplBuddyUser
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBuddyUser
     */
    'totalPages'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof CustomPageImplBuddyUser
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBuddyUser
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplBuddyUser
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplBuddyUser
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomPageImplTeam
 */
export interface CustomPageImplTeam {
    /**
     * 
     * @type {Array<Team>}
     * @memberof CustomPageImplTeam
     */
    'content'?: Array<Team>;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeam
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeam
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeam
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof CustomPageImplTeam
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplTeam
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeam
     */
    'totalPages'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof CustomPageImplTeam
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeam
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplTeam
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplTeam
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomPageImplTeamUser
 */
export interface CustomPageImplTeamUser {
    /**
     * 
     * @type {Array<TeamUser>}
     * @memberof CustomPageImplTeamUser
     */
    'content'?: Array<TeamUser>;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeamUser
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeamUser
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeamUser
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof CustomPageImplTeamUser
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplTeamUser
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeamUser
     */
    'totalPages'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof CustomPageImplTeamUser
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplTeamUser
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplTeamUser
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplTeamUser
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageableObject
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'direction'?: string;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'nullHandling'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'property'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ignoreCase'?: boolean;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'expireTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'hasJoin'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'hasJoinNum'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'isDelete'?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'maxNum'?: number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'updateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'userId'?: number;
}
/**
 * 
 * @export
 * @interface TeamAddedRequest
 */
export interface TeamAddedRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamAddedRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamAddedRequest
     */
    'maxNum'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamAddedRequest
     */
    'expireTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamAddedRequest
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamAddedRequest
     */
    'teamStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamAddedRequest
     */
    'teamName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamAddedRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface TeamUser
 */
export interface TeamUser {
    /**
     * 
     * @type {number}
     * @memberof TeamUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamUser
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUser
     */
    'isDelete'?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamUser
     */
    'teamId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamUser
     */
    'updateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamUser
     */
    'userId'?: number;
}

/**
 * BuddyUserControllerApi - axios parameter creator
 * @export
 */
export const BuddyUserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all2: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buddyuser/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BuddyUser} buddyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: async (buddyUser: BuddyUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buddyUser' is not null or undefined
            assertParamExists('create2', 'buddyUser', buddyUser)
            const localVarPath = `/buddyuser/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buddyUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuddyUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBuddyUser', 'id', id)
            const localVarPath = `/buddyuser/deleteBuddyUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrent: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buddyuser/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buddyuser/getUsersByPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [num] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchUsers: async (num?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buddyuser/match`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('one2', 'id', id)
            const localVarPath = `/buddyuser/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BuddyUser} buddyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceBuddyUser: async (id: number, buddyUser: BuddyUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceBuddyUser', 'id', id)
            // verify required parameter 'buddyUser' is not null or undefined
            assertParamExists('replaceBuddyUser', 'buddyUser', buddyUser)
            const localVarPath = `/buddyuser/replaceBuddyUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buddyUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('searchUser', 'username', username)
            const localVarPath = `/buddyuser/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} tagNameList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserByTags: async (tagNameList: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagNameList' is not null or undefined
            assertParamExists('searchUserByTags', 'tagNameList', tagNameList)
            const localVarPath = `/buddyuser/search/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagNameList) {
                localVarQueryParameter['tagNameList'] = tagNameList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BuddyUserUpdateRequest} buddyUserUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBuddyUser: async (buddyUserUpdateRequest: BuddyUserUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buddyUserUpdateRequest' is not null or undefined
            assertParamExists('updateBuddyUser', 'buddyUserUpdateRequest', buddyUserUpdateRequest)
            const localVarPath = `/buddyuser/updateBuddyUser/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buddyUserUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BuddyUserLoginRequest} buddyUserLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (buddyUserLoginRequest: BuddyUserLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buddyUserLoginRequest' is not null or undefined
            assertParamExists('userLogin', 'buddyUserLoginRequest', buddyUserLoginRequest)
            const localVarPath = `/buddyuser/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buddyUserLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buddyuser/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BuddyUserRegisterRequest} buddyUserRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister: async (buddyUserRegisterRequest: BuddyUserRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buddyUserRegisterRequest' is not null or undefined
            assertParamExists('userRegister', 'buddyUserRegisterRequest', buddyUserRegisterRequest)
            const localVarPath = `/buddyuser/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buddyUserRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuddyUserControllerApi - functional programming interface
 * @export
 */
export const BuddyUserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuddyUserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all2(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all2(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.all2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BuddyUser} buddyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(buddyUser: BuddyUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create2(buddyUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.create2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBuddyUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuddyUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.deleteBuddyUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrent(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrent(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.getCurrent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.getUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [num] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchUsers(num?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchUsers(num, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.matchUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async one2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.one2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.one2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {BuddyUser} buddyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceBuddyUser(id: number, buddyUser: BuddyUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceBuddyUser(id, buddyUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.replaceBuddyUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUser(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUser(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.searchUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} tagNameList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUserByTags(tagNameList: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUserByTags(tagNameList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.searchUserByTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BuddyUserUpdateRequest} buddyUserUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBuddyUser(buddyUserUpdateRequest: BuddyUserUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuddyUser(buddyUserUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.updateBuddyUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BuddyUserLoginRequest} buddyUserLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(buddyUserLoginRequest: BuddyUserLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(buddyUserLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.userLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.userLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BuddyUserRegisterRequest} buddyUserRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegister(buddyUserRegisterRequest: BuddyUserRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegister(buddyUserRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuddyUserControllerApi.userRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BuddyUserControllerApi - factory interface
 * @export
 */
export const BuddyUserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuddyUserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all2(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplBuddyUser> {
            return localVarFp.all2(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BuddyUser} buddyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(buddyUser: BuddyUser, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBuddyUser> {
            return localVarFp.create2(buddyUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuddyUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.deleteBuddyUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrent(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBuddyUser> {
            return localVarFp.getCurrent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplBuddyUser> {
            return localVarFp.getUsers(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [num] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchUsers(num?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBuddyUser> {
            return localVarFp.matchUsers(num, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one2(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBuddyUser> {
            return localVarFp.one2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {BuddyUser} buddyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceBuddyUser(id: number, buddyUser: BuddyUser, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBuddyUser> {
            return localVarFp.replaceBuddyUser(id, buddyUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser(username: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBuddyUser> {
            return localVarFp.searchUser(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} tagNameList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserByTags(tagNameList: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBuddyUser> {
            return localVarFp.searchUserByTags(tagNameList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BuddyUserUpdateRequest} buddyUserUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBuddyUser(buddyUserUpdateRequest: BuddyUserUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBuddyUser> {
            return localVarFp.updateBuddyUser(buddyUserUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BuddyUserLoginRequest} buddyUserLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(buddyUserLoginRequest: BuddyUserLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBuddyUser> {
            return localVarFp.userLogin(buddyUserLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseObject> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BuddyUserRegisterRequest} buddyUserRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister(buddyUserRegisterRequest: BuddyUserRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userRegister(buddyUserRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BuddyUserControllerApi - object-oriented interface
 * @export
 * @class BuddyUserControllerApi
 * @extends {BaseAPI}
 */
export class BuddyUserControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public all2(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).all2(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BuddyUser} buddyUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public create2(buddyUser: BuddyUser, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).create2(buddyUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public deleteBuddyUser(id: number, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).deleteBuddyUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public getCurrent(options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).getCurrent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public getUsers(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).getUsers(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [num] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public matchUsers(num?: number, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).matchUsers(num, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public one2(id: number, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).one2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {BuddyUser} buddyUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public replaceBuddyUser(id: number, buddyUser: BuddyUser, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).replaceBuddyUser(id, buddyUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public searchUser(username: string, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).searchUser(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} tagNameList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public searchUserByTags(tagNameList: Array<string>, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).searchUserByTags(tagNameList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BuddyUserUpdateRequest} buddyUserUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public updateBuddyUser(buddyUserUpdateRequest: BuddyUserUpdateRequest, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).updateBuddyUser(buddyUserUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BuddyUserLoginRequest} buddyUserLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public userLogin(buddyUserLoginRequest: BuddyUserLoginRequest, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).userLogin(buddyUserLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public userLogout(options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BuddyUserRegisterRequest} buddyUserRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuddyUserControllerApi
     */
    public userRegister(buddyUserRegisterRequest: BuddyUserRegisterRequest, options?: RawAxiosRequestConfig) {
        return BuddyUserControllerApiFp(this.configuration).userRegister(buddyUserRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeamControllerApi - axios parameter creator
 * @export
 */
export const TeamControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TeamAddedRequest} teamAddedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeam: async (teamAddedRequest: TeamAddedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamAddedRequest' is not null or undefined
            assertParamExists('addTeam', 'teamAddedRequest', teamAddedRequest)
            const localVarPath = `/team/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamAddedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all1: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/team/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Team} team 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (team: Team, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'team' is not null or undefined
            assertParamExists('create1', 'team', team)
            const localVarPath = `/team/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTeam', 'id', id)
            const localVarPath = `/team/deleteTeam/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByPage: async (page?: number, size?: number, status?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/team/getTeamByPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('one1', 'id', id)
            const localVarPath = `/team/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Team} team 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTeam: async (id: number, team: Team, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceTeam', 'id', id)
            // verify required parameter 'team' is not null or undefined
            assertParamExists('replaceTeam', 'team', team)
            const localVarPath = `/team/replaceTeam/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamControllerApi - functional programming interface
 * @export
 */
export const TeamControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TeamAddedRequest} teamAddedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTeam(teamAddedRequest: TeamAddedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeam(teamAddedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamControllerApi.addTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all1(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all1(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamControllerApi.all1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Team} team 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(team: Team, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(team, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamControllerApi.create1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeam(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamControllerApi.deleteTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamByPage(page?: number, size?: number, status?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamByPage(page, size, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamControllerApi.getTeamByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async one1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.one1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamControllerApi.one1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Team} team 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceTeam(id: number, team: Team, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceTeam(id, team, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamControllerApi.replaceTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeamControllerApi - factory interface
 * @export
 */
export const TeamControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {TeamAddedRequest} teamAddedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeam(teamAddedRequest: TeamAddedRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeam> {
            return localVarFp.addTeam(teamAddedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all1(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplTeam> {
            return localVarFp.all1(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Team} team 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(team: Team, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeam> {
            return localVarFp.create1(team, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.deleteTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByPage(page?: number, size?: number, status?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplTeam> {
            return localVarFp.getTeamByPage(page, size, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one1(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeam> {
            return localVarFp.one1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Team} team 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTeam(id: number, team: Team, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeam> {
            return localVarFp.replaceTeam(id, team, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamControllerApi - object-oriented interface
 * @export
 * @class TeamControllerApi
 * @extends {BaseAPI}
 */
export class TeamControllerApi extends BaseAPI {
    /**
     * 
     * @param {TeamAddedRequest} teamAddedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamControllerApi
     */
    public addTeam(teamAddedRequest: TeamAddedRequest, options?: RawAxiosRequestConfig) {
        return TeamControllerApiFp(this.configuration).addTeam(teamAddedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamControllerApi
     */
    public all1(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return TeamControllerApiFp(this.configuration).all1(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Team} team 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamControllerApi
     */
    public create1(team: Team, options?: RawAxiosRequestConfig) {
        return TeamControllerApiFp(this.configuration).create1(team, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamControllerApi
     */
    public deleteTeam(id: number, options?: RawAxiosRequestConfig) {
        return TeamControllerApiFp(this.configuration).deleteTeam(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {number} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamControllerApi
     */
    public getTeamByPage(page?: number, size?: number, status?: number, options?: RawAxiosRequestConfig) {
        return TeamControllerApiFp(this.configuration).getTeamByPage(page, size, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamControllerApi
     */
    public one1(id: number, options?: RawAxiosRequestConfig) {
        return TeamControllerApiFp(this.configuration).one1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Team} team 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamControllerApi
     */
    public replaceTeam(id: number, team: Team, options?: RawAxiosRequestConfig) {
        return TeamControllerApiFp(this.configuration).replaceTeam(id, team, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeamUserControllerApi - axios parameter creator
 * @export
 */
export const TeamUserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teamuser/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TeamUser} teamUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (teamUser: TeamUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamUser' is not null or undefined
            assertParamExists('create', 'teamUser', teamUser)
            const localVarPath = `/teamuser/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTeamUser', 'id', id)
            const localVarPath = `/teamuser/deleteTeamUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserForTheTeam: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findUserForTheTeam', 'id', id)
            const localVarPath = `/teamuser/detail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('one', 'id', id)
            const localVarPath = `/teamuser/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TeamUser} teamUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTeamUser: async (id: number, teamUser: TeamUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceTeamUser', 'id', id)
            // verify required parameter 'teamUser' is not null or undefined
            assertParamExists('replaceTeamUser', 'teamUser', teamUser)
            const localVarPath = `/teamuser/replaceTeamUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDiscardTeam: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userDiscardTeam', 'id', id)
            const localVarPath = `/teamuser/discard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userJoinTeam: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userJoinTeam', 'id', id)
            const localVarPath = `/teamuser/join/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLeaveTeam: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userLeaveTeam', 'id', id)
            const localVarPath = `/teamuser/leave/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamUserControllerApi - functional programming interface
 * @export
 */
export const TeamUserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamUserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplTeamUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.all']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TeamUser} teamUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(teamUser: TeamUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeamUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(teamUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeamUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeamUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.deleteTeamUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUserForTheTeam(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBuddyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUserForTheTeam(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.findUserForTheTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async one(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeamUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.one(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.one']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TeamUser} teamUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceTeamUser(id: number, teamUser: TeamUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeamUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceTeamUser(id, teamUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.replaceTeamUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDiscardTeam(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userDiscardTeam(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.userDiscardTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userJoinTeam(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseTeamUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userJoinTeam(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.userJoinTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLeaveTeam(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLeaveTeam(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamUserControllerApi.userLeaveTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeamUserControllerApi - factory interface
 * @export
 */
export const TeamUserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamUserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplTeamUser> {
            return localVarFp.all(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TeamUser} teamUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(teamUser: TeamUser, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeamUser> {
            return localVarFp.create(teamUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.deleteTeamUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserForTheTeam(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBuddyUser> {
            return localVarFp.findUserForTheTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeamUser> {
            return localVarFp.one(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TeamUser} teamUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTeamUser(id: number, teamUser: TeamUser, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeamUser> {
            return localVarFp.replaceTeamUser(id, teamUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDiscardTeam(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLong> {
            return localVarFp.userDiscardTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userJoinTeam(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseTeamUser> {
            return localVarFp.userJoinTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLeaveTeam(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.userLeaveTeam(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamUserControllerApi - object-oriented interface
 * @export
 * @class TeamUserControllerApi
 * @extends {BaseAPI}
 */
export class TeamUserControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public all(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).all(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TeamUser} teamUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public create(teamUser: TeamUser, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).create(teamUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public deleteTeamUser(id: number, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).deleteTeamUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public findUserForTheTeam(id: number, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).findUserForTheTeam(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public one(id: number, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).one(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TeamUser} teamUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public replaceTeamUser(id: number, teamUser: TeamUser, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).replaceTeamUser(id, teamUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public userDiscardTeam(id: number, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).userDiscardTeam(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public userJoinTeam(id: number, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).userJoinTeam(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamUserControllerApi
     */
    public userLeaveTeam(id: number, options?: RawAxiosRequestConfig) {
        return TeamUserControllerApiFp(this.configuration).userLeaveTeam(id, options).then((request) => request(this.axios, this.basePath));
    }
}



